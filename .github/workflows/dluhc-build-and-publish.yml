name: DLUHC Build and Publish
on:
  push:

env:
  VERSION: "0.1.0" # Manually increment this version when pushing to main
  IMAGE_NAME_STUB: "digital-form-builder-dluhc-"
  DOCKER_REGISTRY: ghcr.io
  IMAGE_REPO_PATH: "ghcr.io/${{github.repository_owner}}"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [designer, runner, model]
    name: lint-and-test-${{matrix.app}}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Configure yarn caching
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build dependencies
        run: yarn build:dependencies

      # - name: Lint
      #   run: yarn ${{matrix.app}} lint

      # - name: Test
      #   run: yarn ${{matrix.app}} test-cov

      # - name: Upload test results artifacts
      #   uses: actions/upload-artifact@v2
      #   if: ${{ success() || failure() }}
      #   with:
      #     name: test-results-${{matrix.app}}
      #     path: ${{matrix.app}}/test-results
      #     retention-days: 14

      # - name: Upload test coverage artifacts
      #   uses: actions/upload-artifact@v2
      #   if: ${{ success() || failure() }}
      #   with:
      #     name: test-coverage-${{matrix.app}}
      #     path: ${{matrix.app}}/test-coverage
      #     retention-days: 14

  setup-env-vars:
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{steps.set-vars.outputs.LOWER_CASE_BRANCH}}
    steps:
      - id: set-vars
        run: |
          echo "::set-output name=LOWER_CASE_BRANCH::$(
            echo ${GITHUB_REF#refs/heads/} |
            tr "[:upper:]" "[:lower:]"
          )"
      - name: echo-vars
        id: echo-vars
        run: |
          echo ${{steps.set-vars.outputs.LOWER_CASE_BRANCH}}
          echo $VERSION

  build-and-push-images:
    # needs: [lint-and-test, setup-env-vars]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [designer, runner]
    name: build-and-push-${{matrix.app}}-image
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Docker compose pull
        run: docker-compose pull
      - name: Create .env for ${{ matrix.app }} workspace
        run: |
          touch ./${{ matrix.app }}/.env
          echo LAST_TAG_GH=$VERSION >> ./${{ matrix.app }}/.env
          echo LAST_COMMIT_GH=${{ github.sha }} >> ./${{ matrix.app }}/.env
          cat ./${{ matrix.app }}/.env
      # - name: Docker compose build ${{ matrix.app }}
      #   run: |
      #     LAST_TAG='$VERSION'
      #     LAST_COMMIT='${{ github.sha }}'
      #     docker-compose build ${{ matrix.app }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REPO_PATH}}/${{env.IMAGE_NAME_STUB}}${{ matrix.app }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{env.VERSION}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch

      # - name: Log in to registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}"
          tags: ${{ steps.metadata.outputs.tags}}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          file: ${{matrix.app}}/Dockerfile
          build-args: |
            LAST_TAG='$VERSION'
            LAST_COMMIT='${{ github.sha }}'

      # - id: tag-and-push
      #   name: Tag and push (all branches)
      #   run: |
      #     docker image tag ${IMAGE_NAME_STUB}${{ matrix.app }} $IMAGE_REPO_PATH/${IMAGE_NAME_STUB}${{ matrix.app }}:${{ github.sha }}
      #     docker image tag ${IMAGE_NAME_STUB}${{ matrix.app }} $IMAGE_REPO_PATH/${IMAGE_NAME_STUB}${{ matrix.app }}:${{needs.setup-env-vars.outputs.BRANCH_NAME}}

      # - id: tag-latest
      #   name: Tag Latest (if main)
      #   if: needs.setup-env-vars.outputs.BRANCH_NAME == 'main'
      #   run: |
      #     docker image tag ${IMAGE_NAME_STUB}${{ matrix.app }} $IMAGE_REPO_PATH/${IMAGE_NAME_STUB}${{ matrix.app }}:latest
      #     docker image tag ${IMAGE_NAME_STUB}${{ matrix.app }} $IMAGE_REPO_PATH/${IMAGE_NAME_STUB}${{ matrix.app }}:$VERSION
      # - id: push-all-tags
      #   name: Push All Tags
      #   run: |
      #     docker image ls
      #     docker image push --all-tags $IMAGE_REPO_PATH/${IMAGE_NAME_STUB}${{ matrix.app }}
      # - name: Prune Cache
      #   run: docker image prune --all --force --filter "until=48h"

  tag-repo:
    name: Tag repo (if main)
    runs-on: ubuntu-latest
    needs: [build-and-push-images, setup-env-vars]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag repo with version
        run: |
          git tag $VERSION
          git push --tags origin HEAD

#Jobs below are useful for testing variable setting but not needed for workflow to function

# read-env-vars:
#   needs: setup-env-vars
#   runs-on: ubuntu-latest
#   steps:
#     - id: read-vars
#       run: |
#         echo Lower case branch name: ${{needs.setup-env-vars.outputs.BRANCH_NAME}}
#         echo Version: $VERSION
#         echo Image name stub: $IMAGE_NAME_STUB
#         echo Image repo path: $IMAGE_REPO_PATH
#         echo Full image repo path stub: $IMAGE_REPO_PATH/$IMAGE_NAME_STUB
# mock-tag-and-push-image:
#   needs: setup-env-vars
#   runs-on: ubuntu-latest
#   env:
#     matrix_app_mock: runner
#   steps:
#     - id: tag-and-push
#       name: Tag and push (all branches)
#       run: |
#         echo docker tag $IMAGE_NAME_STUB$matrix_app_mock $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:${{ github.sha }}
#         echo docker tag $IMAGE_NAME_STUB$matrix_app_mock $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:$VERSION
#         echo docker tag $IMAGE_NAME_STUB$matrix_app_mock $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:${{needs.setup-env-vars.outputs.BRANCH_NAME}}

#         echo docker push $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:${{ github.sha }}
#         echo docker push $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:$VERSION
#         echo docker push $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:${{needs.setup-env-vars.outputs.BRANCH_NAME}}
#     - id: tag-and-push-latest
#       name: Tag and Push Latest (if main)
#       if: needs.setup-env-vars.outputs.BRANCH_NAME == 'main'
#       run: |
#         echo docker tag $IMAGE_NAME_STUB$matrix_app_mock $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:latest
#         echo docker push $IMAGE_REPO_PATH/$IMAGE_NAME_STUB$matrix_app_mock:latest
